[
  {
    "objectID": "cubes/cubes_old.html",
    "href": "cubes/cubes_old.html",
    "title": "Get data - example",
    "section": "",
    "text": "from datetime import datetime, timedelta\n\n#import xarray as xr\n\nimport pystac_client\n#import stackstac\n\nfrom dask.diagnostics import ProgressBar\n\ndx = 3/3600  # 90m resolution\nepsg = 4326\n# random location in the middle of the Amazon\nbounds = (-64.0, -9.0, -63.5, -8.5)\nminx, miny, maxx, maxy = bounds\ngeom = {\n    'type': 'Polygon',\n    'coordinates': [[\n       [minx, miny],\n       [minx, maxy],\n       [maxx, maxy],\n       [maxx, miny],\n       [minx, miny]\n    ]]\n}\n\n\nyear = 2020\nmonth = 1\n\nstart_date = datetime(year, month, 1)\nend_date = start_date + timedelta(days=31)\ndate_query = start_date.strftime(\"%Y-%m-%d\") + \"/\" + end_date.strftime(\"%Y-%m-%d\")\n\n\nitems = pystac_client.Client.open(\n    \"https://earth-search.aws.element84.com/v1\"\n).search(\n    intersects=geom,\n    collections=[\"sentinel-2-l2a\"],\n    datetime=date_query,\n    limit=100,\n).item_collection()\n\nprint(len(items), \"scenes found\")\n\n52 scenes found\n\n\n\nfor item in items:\n    print(item.id)\n\n\nodc-cube - example\n\nimport odc.stac\nfrom odc.geo.geobox import GeoBox\n\n# define a geobox for my region\ngeobox = GeoBox.from_bbox(bounds, crs=f\"epsg:{epsg}\", resolution=dx)\n\n# lazily combine items\nds_odc = odc.stac.load(\n    items,\n    bands=[\"scl\", \"red\", \"green\", \"blue\"],\n    chunks={'time': 5, 'x': 600, 'y': 600},\n    geobox=geobox,\n    resampling=\"bilinear\"\n)\n\n\n# actually load it\nwith ProgressBar():\n    ds_odc.load()\n\n[                                        ] | 0% Completed | 10.39 sus\n\n\n/home/al/miniforge3/envs/eodh/lib/python3.12/site-packages/rasterio/warp.py:344: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.\n  _reproject(\n\n\n[########################################] | 100% Completed | 108.78 s\n\n\n\nfrom rasterio.enums import Resampling\n# define a mask for valid pixels (non-cloud)\n\ndef is_valid_pixel(data):\n    # include only vegetated, not_vegitated, water, and snow\n    return ((data &gt; 3) & (data &lt; 7)) | (data==11)\n\nds_odc['valid'] = is_valid_pixel(ds_odc.scl)\nds_odc.valid.sum(\"time\").plot()\n\n\n\n\n\n\n\n\n\n# compute the masked median\nrgb_median = (\n    ds_odc[['red', 'green', 'blue']]\n    .where(ds_odc.valid)\n    .to_dataarray(dim=\"band\")\n    .transpose(..., \"band\")\n    .median(dim=\"time\")\n)\n(rgb_median / rgb_median.max() * 2).plot.imshow(rgb=\"band\", figsize=(10, 8))\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\n\nprint(ds_odc.longitude.values[:5])\n\n[-63.99958333 -63.99875    -63.99791667 -63.99708333 -63.99625   ]\n\n\n\n\n# Show the raw data\nds_odc[[\"red\", \"green\", \"blue\"]].isel(time=slice(0, 12)).to_array().plot.imshow(\n    col=\"time\", col_wrap=4, vmin=0, vmax=3000\n)\n\n\n\n\n\n\n\n\n\n\nGet data - EODH\n\nimport pyeodh\n\nclient = pyeodh.Client().get_catalog_service()\n\n# GET /stac-fastapi/catalogs\n#service = client.get_catalog_service()\n#catalogs = service.get_catalogs()\n#ceda_cat = service.get_catalog(\"supported-datasets/ceda-stac-fastapi\")\n\nfor coll in client.get_collections():\n    print(f\"{coll.id}: {coll.description}\")\n\ncmip6: CMIP6\ncordex: CORDEX\nukcp: UKCP\n0fcb2296-2411-11ef-bcbd-da6b61b15d6d: description\n93cdafea-1dc8-11ef-968f-6a7abc48984c: description\n97d80a3c-1dc7-11ef-92a3-6a7abc48984c: description\nad608ce4-1d0e-11ef-8036-563e2ce721d4: description\n1440d164-1376-11ef-b8ab-e20b664dd0f8: description\n093927f4-12ad-11ef-94e9-7e375e8a9c97: description\nsentinel2_ard: sentinel 2 ARD\n\n\n\nsentinel2_ard = client.get_catalog(\"supported-datasets/ceda-stac-fastapi\").get_collection('sentinel2_ard')\nprint(sentinel2_ard.extent.spatial.bboxes)\nprint([str(d) for d in sentinel2_ard.extent.temporal.intervals[0]])\n\n[[-9.00034454651177, 49.48562028352171, 3.1494256015866995, 61.33444247301668]]\n['2023-01-01 11:14:51+00:00', '2023-11-01 11:43:49+00:00']\n\n\n\n#item_search = client.search(\n#    collections=['sentinel2_ard'],\n#    datetime=\"2023-01-01/2023-02-28\",\n#    catalog_path=[\"supported-datasets/ceda-stac-fastapi\"],\n#    limit=10,\n#)\n\nitems = client.search(\n    collections=[\"sentinel2_ard\"],\n    catalog_paths=[\"supported-datasets/ceda-stac-fastapi\"],\n    datetime=\"2023-01-01/2023-02-28\",\n    limit=100,\n)\nprint(items.total_count)\n\nfor item in items:\n    print(item.properties[\"start_datetime\"], item.properties[\"end_datetime\"])\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[17], line 8\n      1 #item_search = client.search(\n      2 #    collections=['sentinel2_ard'],\n      3 #    datetime=\"2023-01-01/2023-02-28\",\n      4 #    catalog_path=[\"supported-datasets/ceda-stac-fastapi\"],\n      5 #    limit=10,\n      6 #)\n----&gt; 8 items = client.search(\n      9     collections=[\"sentinel2_ard\"],\n     10     catalog_paths=[\"supported-datasets/ceda-stac-fastapi\"],\n     11     datetime=\"2023-01-01/2023-02-28\",\n     12     limit=100,\n     13 )\n     14 print(items.total_count)\n     16 for item in items:\n\nTypeError: Catalog.search() got an unexpected keyword argument 'catalog_paths'"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nAnd not about me\nJust text really"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "webtest",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "notes/CWL.html",
    "href": "notes/CWL.html",
    "title": "webtesting",
    "section": "",
    "text": "https://www.commonwl.org/v1.1/CommandLineTool.html#CommandLineTool\nA parameter is a named symbolic input or output of process, with an associated datatype or schema. During execution, values are assigned to parameters to make the input object or output object used for concrete process invocation.\nA CommandLineTool is a process characterized by the execution of a standalone, non-interactive program which is invoked on some input, produces output, and then terminates.\nA workflow is a process characterized by multiple subprocess steps, where step outputs are connected to the inputs of downstream steps to form a directed acylic graph, and independent steps may run concurrently.\nA process requirement modifies the semantics or runtime environment of a process. If an implementation cannot satisfy all requirements, or a requirement is listed which is not recognized by the implementation, it is a fatal error and the implementation must not attempt to run the process, unless overridden at user option. Requirements specified in a parent Workflow are inherited by step processes if they are valid for that step. If the substep is a CommandLineTool only the InlineJavascriptRequirement, SchemaDefRequirement, DockerRequirement, SoftwareRequirement, InitialWorkDirRequirement, EnvVarRequirement, ShellCommandRequirement, ResourceRequirement are valid. Requirements override hints.\nA hint is similar to a requirement; however, it is not an error if an implementation cannot satisfy all hints. The implementation may report a warning if a hint cannot be satisfied.\nParameter references are denoted by the syntax $(…)\nAn expression is a fragment of Javascript/ECMAScript 5.1 code evaluated by the workflow platform to affect the inputs, outputs, or behavior of a process. Expressions are distinct from regular processes in that they are intended to modify the behavior of the workflow itself rather than perform the primary work of the workflow. Expressions in CWL are an optional feature and are not required to be implemented by all consumers of CWL documents. They should be used sparingly, when there is no other way to achieve the desired outcome. Excessive use of expressions may be a signal that other refactoring of the tools or workflows would benefit the author, runtime, and users of the CWL document in question. To declare the use of expressions, the document must include the process requirement InlineJavascriptRequirement. Expressions may be used in any field permitting the pseudo-type Expression, as specified by this document.\nThe generic execution sequence of a CWL process (including workflows and command line line tools) is as follows.\n\nLoad input object.\nLoad, process and validate a CWL document, yielding one or more process objects. The $namespaces present in the CWL document are also used when validating and processing the input object.\nIf there are multiple process objects (due to $graph) and which process object to start with is not specified in the input object (via a cwl:tool entry) or by any other means (like a URL fragment) then choose the process with the id of “#main” or “main”.\nValidate the input object against the inputs schema for the process.\nValidate process requirements are met.\nPerform any further setup required by the specific process type.\nExecute the process.\nCapture results of process execution into the output object.\nValidate the output object against the outputs schema for the process.\nReport the output object to the process caller.\n\nBy convention, a CWL document may begin with #!/usr/bin/env cwl-runner and be marked as executable (the POSIX “+x” permission bits) to enable it to be executed directly. A workflow platform may support this mode of operation; if so, it must provide cwl-runner as an alias for the platform’s CWL implementation.\nhttps://docs.dockstore.org/en/develop/getting-started/getting-started-with-cwl.html\nIt is recommended that you have the following minimum fields:\n``` doc:  id:  label: \ncwlVersion: v1.1\ndct:creator: foaf:name: ```"
  },
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "hello.html#polar-axis",
    "href": "hello.html#polar-axis",
    "title": "Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "code/services/services.html",
    "href": "code/services/services.html",
    "title": "webtesting",
    "section": "",
    "text": "from owslib.wmts import WebMapTileService\ns_url = \"https://test.eodatahub.org.uk/vs/cache/ows/wmts?\"\n\nwmts = WebMapTileService(s_url)\n\nprint(wmts.identification.type)\nprint(wmts.identification.version)\nprint(wmts.identification.title)\nprint(wmts.identification.keywords)\n\nOGC WMTS\n1.0.0\nNone\n[]\n\n\n\nif len(wmts.contents.keys()) &gt; 0:\n    print(sorted(list(wmts.contents)))#[0])\nelse:\n    print(\"No data\")\n\n['S2L1C__CLOUD', 'S2L1C__CLOUD_PROB', 'S2L1C__FALSE_COLOR', 'S2L1C__NDVI', 'S2L1C__TRUE_COLOR']\n\n\n\nimport folium\n\n# Create a map centered at a specific latitude and longitude\nm = folium.Map(location=[52, 0], zoom_start=5)\n\n# WMTS Layer URL template with placeholders for TileMatrix, TileCol, and TileRow\n#wmts_url = (\n#    'https://test.eodatahub.org.uk/vs/cache/ows/wmts?layer=S2L1C__TRUE_COLOR&style=default'\n#    '&tilematrixset=WGS84&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image%2Fpng'\n#    '&TileMatrix={z}&TileCol={x}&TileRow={y}&time=2023-01-01T00%3A00%3A00Z%2F2023-12-31T23%3A59%3A59Z'\n#)\nwmts_url = 'https://test.eodatahub.org.uk/vs/cache/ows/wmts?'\n\n#service=WMTS&request=GetCapabilities\n\n# Add WMTS layer to the map\nfolium.raster_layers.TileLayer(\n    tiles=wmts_url,\n    service='WMTS',\n    layer='S2L1C__TRUE_COLOR',\n    tilematrixset='WGS84',\n    attr='&copy; &lt;a href=\"https://test.eodatahub.org.uk\"&gt;EO Data Hub&lt;/a&gt;',\n    name='WMTS Layer',\n    overlay=True,\n    control=True,\n    fmt='image/png'\n).add_to(m)\n\n# Add a layer control to toggle the WMTS layer\nfolium.LayerControl().add_to(m)\n\nm\n# Save the map to an HTML file\n#m.save('wmts_map.html')\n\n#https://a.s2maps-tiles.eu/wmts/?service=WMTS&request=GetCapabilities\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "cubes/cubes.html",
    "href": "cubes/cubes.html",
    "title": "TRY TO USE EODH",
    "section": "",
    "text": "Following https://odc-stac.readthedocs.io/en/latest/notebooks/stac-load-e84-aws.html\n\nimport dask.distributed\nimport folium\nimport folium.plugins # Not sure what this does\nimport geopandas as gpd\nimport shapely.geometry\nfrom IPython.display import display\nfrom pystac_client import Client\n\nfrom odc.stac import configure_rio, stac_load # the data cube bit\n\n\ndef convert_bounds(bbox, invert_y=False):\n    \"\"\"\n    Helper method for changing bounding box representation to leaflet notation\n\n    ``(lon1, lat1, lon2, lat2) -&gt; ((lat1, lon1), (lat2, lon2))``\n    \"\"\"\n    x1, y1, x2, y2 = bbox\n    if invert_y:\n        y1, y2 = y2, y1\n    return ((y1, x1), (y2, x2))\n\n\n# SET UP DASK CLIENT\n\nclient = dask.distributed.Client()\nconfigure_rio(cloud_defaults=True, aws={\"aws_unsigned\": True}, client=client) # sets up gdal for cloud use\ndisplay(client)\n\n\n     \n    \n        Client\n        Client-c09ac82f-69fa-11ef-adda-f40669402fbd\n        \n\n\n\nConnection method: Cluster object\nCluster type: distributed.LocalCluster\n\n\nDashboard: http://127.0.0.1:8787/status\n\n\n\n\n\n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        15a4dda1\n        \n\n\n\nDashboard: http://127.0.0.1:8787/status\nWorkers: 4\n\n\nTotal threads: 4\nTotal memory: 15.48 GiB\n\n\nStatus: running\nUsing processes: True\n\n\n\n\n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-5afef738-f614-4e87-8b54-1e01834979ea\n            \n\n\n\nComm: tcp://127.0.0.1:46259\nWorkers: 4\n\n\nDashboard: http://127.0.0.1:8787/status\nTotal threads: 4\n\n\nStarted: Just now\nTotal memory: 15.48 GiB\n\n\n\n\n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n\n\n\nComm: tcp://127.0.0.1:34981\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:39189/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:37539\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-dio6s2dt\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 1\n                \n                \n\n\n\nComm: tcp://127.0.0.1:39447\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:40427/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:34723\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-yyrhf6nj\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 2\n                \n                \n\n\n\nComm: tcp://127.0.0.1:34419\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:43009/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:33179\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-hznphr20\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 3\n                \n                \n\n\n\nComm: tcp://127.0.0.1:37759\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:38163/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:36541\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-es371rib\n\n\n\n\n            \n            \n        \n        \n\n    \n\n\n        \n    \n\n            \n        \n\n    \n\n\n\n\n# FIND STAC ITEMS\n\nkm2deg = 1.0 / 111\nx, y = (113.887, -25.843)  # Center point of a query\nr = 100 * km2deg\nbbox = (x - r, y - r, x + r, y + r)\n\ncatalog = Client.open(\"https://earth-search.aws.element84.com/v1/\")\n\nquery = catalog.search(\n    collections=[\"sentinel-2-l2a\"], datetime=\"2021-09-16\", limit=100, bbox=bbox\n)\n\nitems = list(query.items())\nprint(f\"Found: {len(items):d} datasets\")\n\n# Convert STAC items into a GeoJSON FeatureCollection\nstac_json = query.item_collection_as_dict()\n\nFound: 18 datasets\n\n\n\n# REVIEW SEARCH RESULTS\n\ngdf = gpd.GeoDataFrame.from_features(stac_json, \"epsg:4326\")\n\n# Compute granule id from components\ngdf[\"granule\"] = (\n    gdf[\"mgrs:utm_zone\"].apply(lambda x: f\"{x:02d}\")\n    + gdf[\"mgrs:latitude_band\"]\n    + gdf[\"mgrs:grid_square\"]\n)\n\nfig = gdf.plot(\n    \"granule\",\n    edgecolor=\"black\",\n    categorical=True,\n    aspect=\"equal\",\n    alpha=0.5,\n    figsize=(6, 12),\n    legend=True,\n    legend_kwds={\"loc\": \"upper left\", \"frameon\": False, \"ncol\": 1},\n)\n_ = fig.set_title(\"STAC Query Results\")\n\n\n\n\n\n\n\n\n\n# PLOT THE SAME, but using FOLIUM\n\n# https://github.com/python-visualization/folium/issues/1501\nfrom branca.element import Figure\n\nfig = Figure(width=\"400px\", height=\"500px\")\nmap1 = folium.Map()\nfig.add_child(map1)\n\nfolium.GeoJson(\n    shapely.geometry.box(*bbox),\n    style_function=lambda x: dict(fill=False, weight=1, opacity=0.7, color=\"olive\"),\n    name=\"Query\",\n).add_to(map1)\n\ngdf.explore(\n    \"granule\",\n    categorical=True,\n    tooltip=[\n        \"granule\",\n        \"datetime\",\n        \"eo:cloud_cover\",\n    ],\n    popup=True,\n    style_kwds=dict(fillOpacity=0.1, width=2),\n    name=\"STAC\",\n    m=map1,\n)\n\nmap1.fit_bounds(bounds=convert_bounds(gdf.unary_union.bounds))\ndisplay(fig)\n\n/tmp/ipykernel_44506/1400671563.py:30: DeprecationWarning: The 'unary_union' attribute is deprecated, use the 'union_all()' method instead.\n  map1.fit_bounds(bounds=convert_bounds(gdf.unary_union.bounds))\n\n\n\n\n\n\nitems\n\n[&lt;Item id=S2A_49JFL_20210916_1_L2A&gt;,\n &lt;Item id=S2A_49JFL_20210916_0_L2A&gt;,\n &lt;Item id=S2A_49JGL_20210916_0_L2A&gt;,\n &lt;Item id=S2A_49JGL_20210916_1_L2A&gt;,\n &lt;Item id=S2A_50JKR_20210916_1_L2A&gt;,\n &lt;Item id=S2A_50JKR_20210916_0_L2A&gt;,\n &lt;Item id=S2A_49JGM_20210916_1_L2A&gt;,\n &lt;Item id=S2A_49JGM_20210916_0_L2A&gt;,\n &lt;Item id=S2A_50JKS_20210916_0_L2A&gt;,\n &lt;Item id=S2A_50JKS_20210916_1_L2A&gt;,\n &lt;Item id=S2A_49JHM_20210916_0_L2A&gt;,\n &lt;Item id=S2A_49JHM_20210916_1_L2A&gt;,\n &lt;Item id=S2A_49JGN_20210916_0_L2A&gt;,\n &lt;Item id=S2A_49JGN_20210916_1_L2A&gt;,\n &lt;Item id=S2A_50JKT_20210916_0_L2A&gt;,\n &lt;Item id=S2A_50JKT_20210916_1_L2A&gt;,\n &lt;Item id=S2A_49JHN_20210916_0_L2A&gt;,\n &lt;Item id=S2A_49JHN_20210916_1_L2A&gt;]\n\n\n\n# CONSTRUCT DASK DATASET\n# Note: there are 9 STAC Items on input, and only one timeslice on output. \n# Due to groupby=\"solar_day\" (all items that occured on the same day added to one image plane).\n\n# Since we will plot it on a map we need to use `EPSG:3857` projection\ncrs = \"epsg:3857\"\nzoom = 2**5  # overview level 5\n\nxx = stac_load(\n    items,\n    bands=(\"red\", \"green\", \"blue\"),\n    crs=crs,\n    resolution=10 * zoom,\n    chunks={},  # &lt;-- use Dask\n    groupby=\"solar_day\",\n)\ndisplay(xx)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 7MB\nDimensions:      (y: 1101, x: 1087, time: 1)\nCoordinates:\n  * y            (y) float64 9kB -2.797e+06 -2.798e+06 ... -3.149e+06 -3.149e+06\n  * x            (x) float64 9kB 1.247e+07 1.247e+07 ... 1.282e+07 1.282e+07\n    spatial_ref  int32 4B 3857\n  * time         (time) datetime64[ns] 8B 2021-09-16T02:34:44.451000\nData variables:\n    red          (time, y, x) uint16 2MB dask.array&lt;chunksize=(1, 1101, 1087), meta=np.ndarray&gt;\n    green        (time, y, x) uint16 2MB dask.array&lt;chunksize=(1, 1101, 1087), meta=np.ndarray&gt;\n    blue         (time, y, x) uint16 2MB dask.array&lt;chunksize=(1, 1101, 1087), meta=np.ndarray&gt;xarray.DatasetDimensions:y: 1101x: 1087time: 1Coordinates: (4)y(y)float64-2.797e+06 ... -3.149e+06units :metreresolution :-320.0crs :EPSG:3857array([-2797280., -2797600., -2797920., ..., -3148640., -3148960., -3149280.])x(x)float641.247e+07 1.247e+07 ... 1.282e+07units :metreresolution :320.0crs :EPSG:3857array([12468000., 12468320., 12468640., ..., 12814880., 12815200., 12815520.])spatial_ref()int323857spatial_ref :PROJCRS[\"WGS 84 / Pseudo-Mercator\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Popular Visualisation Pseudo-Mercator\",METHOD[\"Popular Visualisation Pseudo Mercator\",ID[\"EPSG\",1024]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"easting (X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing (Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Web mapping and visualisation.\"],AREA[\"World between 85.06°S and 85.06°N.\"],BBOX[-85.06,-180,85.06,180]],ID[\"EPSG\",3857]]crs_wkt :PROJCRS[\"WGS 84 / Pseudo-Mercator\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Popular Visualisation Pseudo-Mercator\",METHOD[\"Popular Visualisation Pseudo Mercator\",ID[\"EPSG\",1024]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"easting (X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing (Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Web mapping and visualisation.\"],AREA[\"World between 85.06°S and 85.06°N.\"],BBOX[-85.06,-180,85.06,180]],ID[\"EPSG\",3857]]GeoTransform :12467840 320 0 -2797120 0 -320array(3857, dtype=int32)time(time)datetime64[ns]2021-09-16T02:34:44.451000array(['2021-09-16T02:34:44.451000000'], dtype='datetime64[ns]')Data variables: (3)red(time, y, x)uint16dask.array&lt;chunksize=(1, 1101, 1087), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.28 MiB\n2.28 MiB\n\n\nShape\n(1, 1101, 1087)\n(1, 1101, 1087)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nuint16 numpy.ndarray\n\n\n\n\n                         1087 1101 1\n\n\n\n\ngreen(time, y, x)uint16dask.array&lt;chunksize=(1, 1101, 1087), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.28 MiB\n2.28 MiB\n\n\nShape\n(1, 1101, 1087)\n(1, 1101, 1087)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nuint16 numpy.ndarray\n\n\n\n\n                         1087 1101 1\n\n\n\n\nblue(time, y, x)uint16dask.array&lt;chunksize=(1, 1101, 1087), meta=np.ndarray&gt;nodata :0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.28 MiB\n2.28 MiB\n\n\nShape\n(1, 1101, 1087)\n(1, 1101, 1087)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nuint16 numpy.ndarray\n\n\n\n\n                         1087 1101 1\n\n\n\n\nIndexes: (3)yPandasIndexPandasIndex(Index([-2797280.0, -2797600.0, -2797920.0, -2798240.0, -2798560.0, -2798880.0,\n       -2799200.0, -2799520.0, -2799840.0, -2800160.0,\n       ...\n       -3146400.0, -3146720.0, -3147040.0, -3147360.0, -3147680.0, -3148000.0,\n       -3148320.0, -3148640.0, -3148960.0, -3149280.0],\n      dtype='float64', name='y', length=1101))xPandasIndexPandasIndex(Index([12468000.0, 12468320.0, 12468640.0, 12468960.0, 12469280.0, 12469600.0,\n       12469920.0, 12470240.0, 12470560.0, 12470880.0,\n       ...\n       12812640.0, 12812960.0, 12813280.0, 12813600.0, 12813920.0, 12814240.0,\n       12814560.0, 12814880.0, 12815200.0, 12815520.0],\n      dtype='float64', name='x', length=1087))timePandasIndexPandasIndex(DatetimeIndex(['2021-09-16 02:34:44.451000'], dtype='datetime64[ns]', name='time', freq=None))Attributes: (0)\n\n\n\n# DATA FOOTPRINT\nxx.odc.geobox\n\n        \n        \n        GeoBox\n        \n            \n                \n                    Dimensions1,087x1,101\nEPSG3857\nResolution320m\nCell200px\n                    \n\n\n\n\n                \n            \n            \n\n\n\n\n        \n        \n            WKT\n            PROJCRS[\"WGS 84 / Pseudo-Mercator\",    BASEGEOGCRS[\"WGS 84\",        DATUM[\"World Geodetic System 1984\",            ELLIPSOID[\"WGS 84\",6378137,298.257223563,                LENGTHUNIT[\"metre\",1]]],        PRIMEM[\"Greenwich\",0,            ANGLEUNIT[\"degree\",0.0174532925199433]],        ID[\"EPSG\",4326]],    CONVERSION[\"unnamed\",        METHOD[\"Popular Visualisation Pseudo Mercator\",            ID[\"EPSG\",1024]],        PARAMETER[\"Latitude of natural origin\",0,            ANGLEUNIT[\"degree\",0.0174532925199433],            ID[\"EPSG\",8801]],        PARAMETER[\"Longitude of natural origin\",0,            ANGLEUNIT[\"degree\",0.0174532925199433],            ID[\"EPSG\",8802]],        PARAMETER[\"False easting\",0,            LENGTHUNIT[\"metre\",1],            ID[\"EPSG\",8806]],        PARAMETER[\"False northing\",0,            LENGTHUNIT[\"metre\",1],            ID[\"EPSG\",8807]]],    CS[Cartesian,2],        AXIS[\"easting (X)\",east,            ORDER[1],            LENGTHUNIT[\"metre\",1]],        AXIS[\"northing (Y)\",north,            ORDER[2],            LENGTHUNIT[\"metre\",1]],    USAGE[        SCOPE[\"Web mapping and visualisation.\"],        AREA[\"World between 85.06°S and 85.06°N.\"],        BBOX[-85.06,-180,85.06,180]],    ID[\"EPSG\",3857]]\n        \n        \n\n\n\n%%time\nxx = xx.compute() # LOAD INTO LOCAL MEMORY\n\n\n_ = (\n    xx.isel(time=0)\n    .to_array(\"band\")\n    .plot.imshow(\n        col=\"band\",\n        size=4,\n        vmin=0,\n        vmax=4000,\n    )\n)\n\n\n\n\n\n\n\n\n\nr = 6.5 * km2deg\nsmall_bbox = (x - r, y - r, x + r, y + r)\n\nyy = stac_load(\n    items,\n    bands=(\"red\", \"green\", \"blue\"),\n    crs=crs,\n    resolution=10,\n    chunks={},  # &lt;-- use Dask\n    groupby=\"solar_day\",\n    bbox=small_bbox,\n)\ndisplay(yy.odc.geobox)\n\n        \n        \n        GeoBox\n        \n            \n                \n                    Dimensions1,305x1,450\nEPSG3857\nResolution10m\nCell200px\n                    \n\n\n\n\n                \n            \n            \n\n\n\n\n        \n        \n            WKT\n            PROJCRS[\"WGS 84 / Pseudo-Mercator\",    BASEGEOGCRS[\"WGS 84\",        DATUM[\"World Geodetic System 1984\",            ELLIPSOID[\"WGS 84\",6378137,298.257223563,                LENGTHUNIT[\"metre\",1]]],        PRIMEM[\"Greenwich\",0,            ANGLEUNIT[\"degree\",0.0174532925199433]],        ID[\"EPSG\",4326]],    CONVERSION[\"unnamed\",        METHOD[\"Popular Visualisation Pseudo Mercator\",            ID[\"EPSG\",1024]],        PARAMETER[\"Latitude of natural origin\",0,            ANGLEUNIT[\"degree\",0.0174532925199433],            ID[\"EPSG\",8801]],        PARAMETER[\"Longitude of natural origin\",0,            ANGLEUNIT[\"degree\",0.0174532925199433],            ID[\"EPSG\",8802]],        PARAMETER[\"False easting\",0,            LENGTHUNIT[\"metre\",1],            ID[\"EPSG\",8806]],        PARAMETER[\"False northing\",0,            LENGTHUNIT[\"metre\",1],            ID[\"EPSG\",8807]]],    CS[Cartesian,2],        AXIS[\"easting (X)\",east,            ORDER[1],            LENGTHUNIT[\"metre\",1]],        AXIS[\"northing (Y)\",north,            ORDER[2],            LENGTHUNIT[\"metre\",1]],    USAGE[        SCOPE[\"Web mapping and visualisation.\"],        AREA[\"World between 85.06°S and 85.06°N.\"],        BBOX[-85.06,-180,85.06,180]],    ID[\"EPSG\",3857]]\n        \n        \n\n\n\nyy = yy.compute()\n\n\n_ = (\n    yy.isel(time=0)\n    .to_array(\"band\")\n    .plot.imshow(\n        col=\"band\",\n        size=4,\n        vmin=0,\n        vmax=4000,\n    )\n)\n\n\n\n\n\n\n\n\n\nTRY TO USE EODH\n\nimport dask.distributed\nimport folium\n#import folium.plugins # Not sure what this does\nimport geopandas as gpd\nimport shapely.geometry\nfrom IPython.display import display\nfrom pystac_client import Client\n\nfrom odc.stac import configure_rio, stac_load # the data cube bit\n\n\ndef convert_bounds(bbox, invert_y=False):\n    \"\"\"\n    Helper method for changing bounding box representation to leaflet notation\n\n    ``(lon1, lat1, lon2, lat2) -&gt; ((lat1, lon1), (lat2, lon2))``\n    \"\"\"\n    x1, y1, x2, y2 = bbox\n    if invert_y:\n        y1, y2 = y2, y1\n    return ((y1, x1), (y2, x2))\n\n\n# FIND STAC ITEMS\n\n#km2deg = 1.0 / 111\n#x, y = (113.887, -25.843)  # Center point of a query\n#r = 100 * km2deg\n#bbox = (x - r, y - r, x + r, y + r)\n\nurl = \"https://api.stac.ceda.ac.uk/\"\n\n#catalog = Client.open(\"https://earth-search.aws.element84.com/v1/\")\nclient = Client.open(url)\nfor coll in client.get_collections():\n    print(f\"{coll.id}: {coll.description}\")\n\ncmip6: CMIP6\ncordex: CORDEX\nsentinel1: Sentinel 1\nsentinel2_ard: sentinel 2 ARD\nsst-cdrv3-collection: collection of EOCIS SST CDR V3\nukcp: UKCP\n\n\n\nsentinel2_ard = client.get_collection('sentinel2_ard')\n\nsentinel2_ard.get_items()\n\n# check the spatial and temporal extent of the collection\n\nprint(\"spatial extent:\", sentinel2_ard.extent.spatial.bboxes)\nprint(\"data range:\", [str(d) for d in sentinel2_ard.extent.temporal.intervals[0]])\n\n\n\n#items = list(query.items())\n#print(f\"Found: {len(items):d} datasets\")\n\n# Convert STAC items into a GeoJSON FeatureCollection\n#stac_json = query.item_collection_as_dict()\n\nspatial extent: [[-9.00034454651177, 49.48562028352171, 3.1494256015866995, 61.33444247301668]]\ndata range: ['2023-01-01 11:14:51+00:00', '2023-11-01 11:43:49+00:00']\n\n\n\n# SEARCH\nitem_search = client.search(\n    collections=['sentinel2_ard'],\n    query=[\n        'start_datetime&gt;=2023-01-01',\n        'end_datetime&lt;=2023-02-28', \n    ],\n    max_items=100,\n)\n\n\nitems = list(item_search.items())\nlen(items)\n\n100\n\n\n\nfrom shapely import Point\npoint = Point(-1.3144835766058023, 51.57555380377267) # Atlas building at RAL\n\nitem_search = client.search(\n    collections=['sentinel2_ard'],\n    intersects=point,\n    query=[\n        'start_datetime&gt;=2023-01-01',\n        'end_datetime&lt;=2023-02-28', \n      ],\n    max_items=10,\n)\n\nitems = list(item_search.items())\nitems\n\n[&lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.23.S2A_20230223_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.15.S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.13.S2A_20230213_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.08.S2B_20230208_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.31.S2A_20230131_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.24.S2A_20230124_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.21.S2A_20230121_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.19.S2B_20230119_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;]\n\n\n\nitems[0].to_dict()\n\n{'type': 'Feature',\n 'stac_version': '1.0.0',\n 'id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n 'properties': {'file_count': 7,\n  'start_datetime': '2023-02-25T11:09:39Z',\n  'end_datetime': '2023-02-25T11:09:39Z',\n  'NSSDC Identifier': '2015-000A',\n  'created': '2024-02-07T11:36:30.012295Z',\n  'Instrument Family Name': 'Multi-Spectral Instrument',\n  'Platform Number': '2B',\n  'Datatake Type': 'INS-NOBS',\n  'esa_file_name': 'S2B_MSIL1C_20230225T110939_N0509_R137_T30UXC_20230225T115203',\n  'Ground Tracking Direction': 'descending',\n  'datetime': '2023-02-25T11:09:39Z',\n  'instance_id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n  'size': 1949488461,\n  'Product Type': 'S2MSI1C',\n  'Instrument Family Name Abbreviation': 'MSI',\n  'Start Orbit Number': '031194',\n  'eo:cloud_cover': '74.4384424736481',\n  'Start Relative Orbit Number': '137',\n  'updated': '2024-02-07T11:36:30.012295Z',\n  'Instrument Mode': None,\n  'EPSG': '27700'},\n 'geometry': {'coordinates': [[[-1.5321045, 52.34135509726958],\n    [0.077757925309447, 52.31036691499413],\n    [0.011254122594852, 51.32452335478603],\n    [-1.5638733, 51.354439390266904],\n    [-1.5321045, 52.34135509726958]]],\n  'type': 'Polygon'},\n 'links': [{'rel': 'self',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard/items/neodc.sentinel_ard.data.sentinel_2.2023.02.25.S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n   'type': 'application/geo+json'},\n  {'rel': 'parent',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'collection',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'root',\n   'href': 'https://api.stac.ceda.ac.uk/',\n   'type': 'application/json',\n   'title': 'stac-fastapi-elasticsearch'}],\n 'assets': {'cloud': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_clouds.tif',\n   'size': 1900764,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'metadata': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_meta.xml',\n   'size': 18360,\n   'location': 'on_disk',\n   'roles': ['metadata']},\n  'thumbnail': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg',\n   'size': 85207,\n   'location': 'on_disk',\n   'roles': ['thumbnail']},\n  'topographic_shadow': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_toposhad.tif',\n   'size': 250612,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'cog': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref.tif',\n   'size': 1945239489,\n   'eo:bands': [{'full_width_half_max': 0.07,\n     'central_wavelength': 492.1,\n     'name': 'B02',\n     'description': 'Blue',\n     'common_name': 'blue'},\n    {'full_width_half_max': 0.04,\n     'central_wavelength': 559,\n     'name': 'B03',\n     'description': 'Green',\n     'common_name': 'green'},\n    {'full_width_half_max': 0.03,\n     'central_wavelength': 665,\n     'name': 'B04',\n     'description': 'Red',\n     'common_name': 'red'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 703.8,\n     'name': 'B05',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 739.1,\n     'name': 'B06',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 779.7,\n     'name': 'B07',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.11,\n     'central_wavelength': 833,\n     'name': 'B08',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 864,\n     'name': 'B08a',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir08'},\n    {'full_width_half_max': 0.09,\n     'central_wavelength': 1610.4,\n     'name': 'B11',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir16'},\n    {'full_width_half_max': 0.19,\n     'central_wavelength': 2185.7,\n     'name': 'B12',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir22'}],\n   'location': 'on_disk',\n   'roles': ['data']},\n  'valid_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_valid.tif',\n   'size': 288670,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'saturated_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/25/S2B_20230225_lat52lon075_T30UXC_ORB137_utm30n_osgb_sat.tif',\n   'size': 1705359,\n   'location': 'on_disk',\n   'roles': ['data']}},\n 'bbox': [-1.5638733, 51.32452335478603, 0.077757925309447, 52.34135509726958],\n 'stac_extensions': ['https://stac-extensions.github.io/eo/v1.1.0/schema.json'],\n 'collection': 'sentinel2_ard'}\n\n\n\nitem_search = client.search(\n    collections=['sentinel2_ard'],\n    intersects=point,\n    query=[\n        'start_datetime&gt;=2023-01-01',\n        'end_datetime&lt;=2023-02-28', \n        'eo:cloud_cover&lt;=50.0'\n      ],\n    max_items=10,\n)\n\nitems = list(item_search.items())\nitems\n\n[&lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.15.S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.13.S2A_20230213_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.08.S2B_20230208_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.31.S2A_20230131_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.24.S2A_20230124_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.21.S2A_20230121_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.19.S2B_20230119_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.11.S2A_20230111_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.09.S2B_20230109_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;]\n\n\n\nitems[0].to_dict()\n\n{'type': 'Feature',\n 'stac_version': '1.0.0',\n 'id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n 'properties': {'file_count': 7,\n  'start_datetime': '2023-02-20T11:11:01Z',\n  'end_datetime': '2023-02-20T11:11:01Z',\n  'NSSDC Identifier': '2015-000A',\n  'created': '2024-02-07T11:34:51.269363Z',\n  'Instrument Family Name': 'Multi-Spectral Instrument',\n  'Platform Number': '2A',\n  'Datatake Type': 'INS-NOBS',\n  'esa_file_name': 'S2A_MSIL1C_20230220T111101_N0509_R137_T30UXC_20230220T131022',\n  'Ground Tracking Direction': 'descending',\n  'datetime': '2023-02-20T11:11:01Z',\n  'instance_id': 'neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n  'size': 2086211720,\n  'Product Type': 'S2MSI1C',\n  'Instrument Family Name Abbreviation': 'MSI',\n  'Start Orbit Number': '040031',\n  'eo:cloud_cover': '26.2055898951895',\n  'Start Relative Orbit Number': '137',\n  'updated': '2024-02-07T11:34:51.269363Z',\n  'Instrument Mode': None,\n  'EPSG': '27700'},\n 'geometry': {'coordinates': [[[-1.5321045, 52.34135509726958],\n    [0.077757925309447, 52.31036691499413],\n    [0.011254122594852, 51.32452335478603],\n    [-1.5638733, 51.354439390266904],\n    [-1.5321045, 52.34135509726958]]],\n  'type': 'Polygon'},\n 'links': [{'rel': 'self',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard/items/neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb',\n   'type': 'application/geo+json'},\n  {'rel': 'parent',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'collection',\n   'href': 'https://api.stac.ceda.ac.uk/collections/sentinel2_ard',\n   'type': 'application/json'},\n  {'rel': 'root',\n   'href': 'https://api.stac.ceda.ac.uk/',\n   'type': 'application/json',\n   'title': 'stac-fastapi-elasticsearch'}],\n 'assets': {'cloud': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_clouds.tif',\n   'size': 3144692,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'metadata': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_meta.xml',\n   'size': 18363,\n   'location': 'on_disk',\n   'roles': ['metadata']},\n  'thumbnail': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg',\n   'size': 118722,\n   'location': 'on_disk',\n   'roles': ['thumbnail']},\n  'topographic_shadow': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_toposhad.tif',\n   'size': 262653,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'cog': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref.tif',\n   'size': 2080673323,\n   'eo:bands': [{'full_width_half_max': 0.07,\n     'central_wavelength': 496.6,\n     'name': 'B02',\n     'description': 'Blue',\n     'common_name': 'blue'},\n    {'full_width_half_max': 0.04,\n     'central_wavelength': 560,\n     'name': 'B03',\n     'description': 'Green',\n     'common_name': 'green'},\n    {'full_width_half_max': 0.03,\n     'central_wavelength': 664.5,\n     'name': 'B04',\n     'description': 'Red',\n     'common_name': 'red'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 703.9,\n     'name': 'B05',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 740.2,\n     'name': 'B06',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 782.5,\n     'name': 'B07',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'rededge'},\n    {'full_width_half_max': 0.11,\n     'central_wavelength': 835.1,\n     'name': 'B08',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir'},\n    {'full_width_half_max': 0.02,\n     'central_wavelength': 864.8,\n     'name': 'B08a',\n     'description': 'Visible and Near Infrared',\n     'common_name': 'nir08'},\n    {'full_width_half_max': 0.09,\n     'central_wavelength': 1613.7,\n     'name': 'B11',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir16'},\n    {'full_width_half_max': 0.18,\n     'central_wavelength': 2202.4,\n     'name': 'B12',\n     'description': 'Short Wave Infrared',\n     'common_name': 'swir22'}],\n   'location': 'on_disk',\n   'roles': ['data']},\n  'valid_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_valid.tif',\n   'size': 288608,\n   'location': 'on_disk',\n   'roles': ['data']},\n  'saturated_pixels': {'href': 'https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/20/S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb_sat.tif',\n   'size': 1705359,\n   'location': 'on_disk',\n   'roles': ['data']}},\n 'bbox': [-1.5638733, 51.32452335478603, 0.077757925309447, 52.34135509726958],\n 'stac_extensions': ['https://stac-extensions.github.io/eo/v1.1.0/schema.json'],\n 'collection': 'sentinel2_ard'}\n\n\n\nfor key, value in items[1].assets.items():\n    print(key, value.href)\n\ncloud https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_clouds.tif\nmetadata https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_meta.xml\nthumbnail https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref_thumbnail.jpg\ntopographic_shadow https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_toposhad.tif\ncog https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_vmsk_sharp_rad_srefdem_stdsref.tif\nvalid_pixels https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_valid.tif\nsaturated_pixels https://dap.ceda.ac.uk/neodc/sentinel_ard/data/sentinel_2/2023/02/15/S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb_sat.tif\n\n\n\nitems\n\n[&lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.20.S2A_20230220_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.15.S2B_20230215_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.13.S2A_20230213_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.02.08.S2B_20230208_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.31.S2A_20230131_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.24.S2A_20230124_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.21.S2A_20230121_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.19.S2B_20230119_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.11.S2A_20230111_lat52lon075_T30UXC_ORB137_utm30n_osgb&gt;,\n &lt;Item id=neodc.sentinel_ard.data.sentinel_2.2023.01.09.S2B_20230109_lat52lon075_T30UXC_ORB037_utm30n_osgb&gt;]\n\n\n\n# SET UP DASK CLIENT\n\nclient = dask.distributed.Client()\nconfigure_rio(cloud_defaults=True, aws={\"aws_unsigned\": True}, client=client) # sets up gdal for cloud use\ndisplay(client)\n\n/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/distributed/node.py:182: UserWarning: Port 8787 is already in use.\nPerhaps you already have a cluster running?\nHosting the HTTP server on port 36089 instead\n  warnings.warn(\n\n\n\n     \n    \n        Client\n        Client-18464180-69fc-11ef-adda-f40669402fbd\n        \n\n\n\nConnection method: Cluster object\nCluster type: distributed.LocalCluster\n\n\nDashboard: http://127.0.0.1:36089/status\n\n\n\n\n\n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        ebba7415\n        \n\n\n\nDashboard: http://127.0.0.1:36089/status\nWorkers: 4\n\n\nTotal threads: 4\nTotal memory: 15.48 GiB\n\n\nStatus: running\nUsing processes: True\n\n\n\n\n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-cc47dd57-ce18-4acc-8b44-2cfe14ee1b6d\n            \n\n\n\nComm: tcp://127.0.0.1:43071\nWorkers: 4\n\n\nDashboard: http://127.0.0.1:36089/status\nTotal threads: 4\n\n\nStarted: Just now\nTotal memory: 15.48 GiB\n\n\n\n\n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n\n\n\nComm: tcp://127.0.0.1:37851\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:45891/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:44451\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-07pluzp_\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 1\n                \n                \n\n\n\nComm: tcp://127.0.0.1:44127\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:38617/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:46581\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-j1euk6hp\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 2\n                \n                \n\n\n\nComm: tcp://127.0.0.1:35695\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:43975/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:46341\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-guemqotg\n\n\n\n\n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 3\n                \n                \n\n\n\nComm: tcp://127.0.0.1:45491\nTotal threads: 1\n\n\nDashboard: http://127.0.0.1:40249/status\nMemory: 3.87 GiB\n\n\nNanny: tcp://127.0.0.1:45605\n\n\n\nLocal directory: /tmp/dask-scratch-space/worker-_dnsv6m3\n\n\n\n\n            \n            \n        \n        \n\n    \n\n\n        \n    \n\n            \n        \n\n    \n\n\n\n\nprint(f\"Found: {len(items):d} datasets\")\n\n# Convert STAC items into a GeoJSON FeatureCollection\nstac_json = item_search.item_collection_as_dict()\n\nFound: 10 datasets\n\n\n\n# REVIEW SEARCH RESULTS\n\ngdf = gpd.GeoDataFrame.from_features(stac_json, \"epsg:4326\")\n\n# Compute granule id from components\n#gdf[\"granule\"] = (\n#    gdf[\"esa_file_name\"].apply(lambda x: f\"{x:02d}\")\n#    + gdf[\"mgrs:latitude_band\"]\n#    + gdf[\"mgrs:grid_square\"]\n#)\n\nfig = gdf.plot(\n    \"esa_file_name\",\n    edgecolor=\"black\",\n    categorical=True,\n    aspect=\"equal\",\n    alpha=0.5,\n    figsize=(6, 12),\n    legend=True,\n    legend_kwds={\"loc\": \"upper left\", \"frameon\": False, \"ncol\": 1},\n)\n_ = fig.set_title(\"STAC Query Results\")\n\n\n\n\n\n\n\n\n\n# PLOT THE SAME, but using FOLIUM\n\n# https://github.com/python-visualization/folium/issues/1501\n#from branca.element import Figure\n\nimport folium\nf = folium.Figure(width=600, height=400)\nm = folium.Map(location=[52, 2], zoom_start=5).add_to(f)\n\n\n\n\n\n#fig = Figure(width=\"400px\", height=\"500px\")\n#map1 = folium.Map()\n#fig.add_child(map1)\n\n#folium.GeoJson(\n#    shapely.geometry.box(*bbox),\n#    style_function=lambda x: dict(fill=False, weight=1, opacity=0.7, color=\"olive\"),\n#    name=\"Query\",\n#).add_to(m)\n\n\ngdf.explore(\n    \"esa_file_name\",\n    categorical=True,\n    tooltip=[\n        \"esa_file_name\",\n#        \"datetime\",\n#        \"eo:cloud_cover\",\n    ],\n    popup=False,\n#    style_kwds=dict(fillOpacity=0.1, width=2),\n    name=\"STAC\",\n    m=m,\n)\n\n#map1.fit_bounds(bounds=convert_bounds(gdf.unary_union.bounds))\n#display(fig)\n\n\n\n\n\n# CONSTRUCT DASK DATASET\n# Note: there are 9 STAC Items on input, and only one timeslice on output. \n# Due to groupby=\"solar_day\" (all items that occured on the same day added to one image plane).\n\n# Since we will plot it on a map we need to use `EPSG:3857` projection\ncrs = \"epsg:3857\"\nzoom = 2**5  # overview level 5\n\n#xx = stac_load(\n#    items,\n#    bands=(\"B04\", \"B03\", \"B02\"),\n#    crs=crs,\n#    resolution=10 * zoom)#,\n#    chunks={},  # &lt;-- use Dask\n#    groupby=\"solar_day\",\n#)\n#display(xx)\n\n\n#xx = stac_load(\n#    items,\n#    chunks={\"x\": 2048, \"y\": 2048},\n#    patch_url=pc.sign,\n#    resolution=resolution,\n#    # force dtype and nodata\n#    dtype=\"uint16\",\n#    nodata=0,\n#)\n\nxx = stac_load(\n    items,\n    crs=crs,\n    resolution=10 * zoom,\n    chunks={\"x\": 2048, \"y\": 2048},  # &lt;-- use Dask\n)\n\nprint(f\"Bands: {','.join(list(xx.data_vars))}\")\ndisplay(xx)\n\nBands: cloud,thumbnail,topographic_shadow,cog,valid_pixels,saturated_pixels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 79MB\nDimensions:             (y: 574, x: 573, time: 10)\nCoordinates:\n  * y                   (y) float64 5kB 6.862e+06 6.862e+06 ... 6.679e+06\n  * x                   (x) float64 5kB -1.742e+05 -1.739e+05 ... 8.8e+03\n    spatial_ref         int32 4B 3857\n  * time                (time) datetime64[ns] 80B 2023-01-09T11:23:39 ... 202...\nData variables:\n    cloud               (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    thumbnail           (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    topographic_shadow  (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    cog                 (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    valid_pixels        (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n    saturated_pixels    (time, y, x) float32 13MB dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;xarray.DatasetDimensions:y: 574x: 573time: 10Coordinates: (4)y(y)float646.862e+06 6.862e+06 ... 6.679e+06units :metreresolution :-320.0crs :EPSG:3857array([6862240., 6861920., 6861600., ..., 6679520., 6679200., 6678880.])x(x)float64-1.742e+05 -1.739e+05 ... 8.8e+03units :metreresolution :320.0crs :EPSG:3857array([-174240., -173920., -173600., ...,    8160.,    8480.,    8800.])spatial_ref()int323857spatial_ref :PROJCRS[\"WGS 84 / Pseudo-Mercator\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Popular Visualisation Pseudo-Mercator\",METHOD[\"Popular Visualisation Pseudo Mercator\",ID[\"EPSG\",1024]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"easting (X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing (Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Web mapping and visualisation.\"],AREA[\"World between 85.06°S and 85.06°N.\"],BBOX[-85.06,-180,85.06,180]],ID[\"EPSG\",3857]]crs_wkt :PROJCRS[\"WGS 84 / Pseudo-Mercator\",BASEGEOGCRS[\"WGS 84\",ENSEMBLE[\"World Geodetic System 1984 ensemble\",MEMBER[\"World Geodetic System 1984 (Transit)\"],MEMBER[\"World Geodetic System 1984 (G730)\"],MEMBER[\"World Geodetic System 1984 (G873)\"],MEMBER[\"World Geodetic System 1984 (G1150)\"],MEMBER[\"World Geodetic System 1984 (G1674)\"],MEMBER[\"World Geodetic System 1984 (G1762)\"],MEMBER[\"World Geodetic System 1984 (G2139)\"],MEMBER[\"World Geodetic System 1984 (G2296)\"],ELLIPSOID[\"WGS 84\",6378137,298.257223563,LENGTHUNIT[\"metre\",1]],ENSEMBLEACCURACY[2.0]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4326]],CONVERSION[\"Popular Visualisation Pseudo-Mercator\",METHOD[\"Popular Visualisation Pseudo Mercator\",ID[\"EPSG\",1024]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"False easting\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"easting (X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing (Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Web mapping and visualisation.\"],AREA[\"World between 85.06°S and 85.06°N.\"],BBOX[-85.06,-180,85.06,180]],ID[\"EPSG\",3857]]GeoTransform :-174400 320 0 6862400 0 -320array(3857, dtype=int32)time(time)datetime64[ns]2023-01-09T11:23:39 ... 2023-02-...array(['2023-01-09T11:23:39.000000000', '2023-01-11T11:14:31.000000000',\n       '2023-01-19T11:23:09.000000000', '2023-01-21T11:13:51.000000000',\n       '2023-01-24T11:23:41.000000000', '2023-01-31T11:13:11.000000000',\n       '2023-02-08T11:21:29.000000000', '2023-02-13T11:21:51.000000000',\n       '2023-02-15T11:10:49.000000000', '2023-02-20T11:11:01.000000000'],\n      dtype='datetime64[ns]')Data variables: (6)cloud(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nthumbnail(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\ntopographic_shadow(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\ncog(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nvalid_pixels(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nsaturated_pixels(time, y, x)float32dask.array&lt;chunksize=(1, 574, 573), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n12.55 MiB\n1.25 MiB\n\n\nShape\n(10, 574, 573)\n(1, 574, 573)\n\n\nDask graph\n10 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                           573 574 10\n\n\n\n\nIndexes: (3)yPandasIndexPandasIndex(Index([6862240.0, 6861920.0, 6861600.0, 6861280.0, 6860960.0, 6860640.0,\n       6860320.0, 6860000.0, 6859680.0, 6859360.0,\n       ...\n       6681760.0, 6681440.0, 6681120.0, 6680800.0, 6680480.0, 6680160.0,\n       6679840.0, 6679520.0, 6679200.0, 6678880.0],\n      dtype='float64', name='y', length=574))xPandasIndexPandasIndex(Index([-174240.0, -173920.0, -173600.0, -173280.0, -172960.0, -172640.0,\n       -172320.0, -172000.0, -171680.0, -171360.0,\n       ...\n          5920.0,    6240.0,    6560.0,    6880.0,    7200.0,    7520.0,\n          7840.0,    8160.0,    8480.0,    8800.0],\n      dtype='float64', name='x', length=573))timePandasIndexPandasIndex(DatetimeIndex(['2023-01-09 11:23:39', '2023-01-11 11:14:31',\n               '2023-01-19 11:23:09', '2023-01-21 11:13:51',\n               '2023-01-24 11:23:41', '2023-01-31 11:13:11',\n               '2023-02-08 11:21:29', '2023-02-13 11:21:51',\n               '2023-02-15 11:10:49', '2023-02-20 11:11:01'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (0)\n\n\n\n# DATA FOOTPRINT\n#xx.odc.geobox\n\n# TEST\nxx.data_vars[cog]\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[46], line 5\n      1 # DATA FOOTPRINT\n      2 #xx.odc.geobox\n      3 \n      4 # TEST\n----&gt; 5 xx.data_vars[cog]\n\nNameError: name 'cog' is not defined\n\n\n\n\n%%time\nxx = xx.compute() # LOAD INTO LOCAL MEMORY\n\n/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/rasterio/__init__.py:304: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.\n  dataset = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n2024-09-03 17:29:35,400 - distributed.worker - ERROR - Compute Failed\nKey:       ('thumbnail-4cf0090f06da1a44bfc619df23a3de1a', 9, 0, 0)\nState:     executing\nFunction:  _dask_loader_tyx\nargs:      ([[&lt;odc.loader._rio.RioReader object at 0x7a0209f5bd40&gt;]], Tiles: 1x1|574x573px =&gt; 574x573px, (0, 0), (), (), RasterLoadParams(dtype='float32', fill_value=None, src_nodata_fallback=None, src_nodata_override=None, use_overviews=True, resampling='nearest', fail_on_error=True, dims=()), &lt;odc.loader._rio.RioDriver object at 0x7a02102197c0&gt;, {'GDAL_DISABLE_READDIR_ON_OPEN': 'EMPTY_DIR', 'GDAL_HTTP_MAX_RETRY': '10', 'GDAL_HTTP_RETRY_DELAY': '0.5', '_aws': {'aws_unsigned': True}}, &lt;odc.loader._rio.RioReader.LoaderState object at 0x7a02186c3530&gt;, None)\nkwargs:    {}\nException: 'AssertionError()'\nTraceback: '  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_builder.py\", line 434, in _dask_loader_tyx\\n    _fill_nd_slice(\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_builder.py\", line 511, in _fill_nd_slice\\n    yx_roi, pix = src.read(cfg, dst_gbox, dst=dst, selection=selection)\\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py\", line 115, in read\\n    return rio_read(self._src, cfg, dst_geobox, dst=dst, selection=selection)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py\", line 512, in rio_read\\n    _rio_read(src, cfg, dst_geobox, prep_dst(dst), selection=selection)\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py\", line 565, in _rio_read\\n    rr = _reproject_info_from_rio(rdr, dst_geobox, ttol=ttol)\\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py\", line 386, in _reproject_info_from_rio\\n    return compute_reproject_roi(rio_geobox(rdr), dst_geobox, ttol=ttol)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/geo/overlap.py\", line 489, in compute_reproject_roi\\n    tr = native_pix_transform(src, dst)\\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/geo/overlap.py\", line 337, in native_pix_transform\\n    return GbxPointTransform(src, dst)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/odc/geo/overlap.py\", line 102, in __init__\\n    assert src.crs is not None and dst.crs is not None\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n'\n\n\n\n\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\nFile &lt;timed exec&gt;:1\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/xarray/core/dataset.py:1038, in Dataset.compute(self, **kwargs)\n   1014 \"\"\"Manually trigger loading and/or computation of this dataset's data\n   1015 from disk or a remote source into memory and return a new dataset.\n   1016 Unlike load, the original dataset is left unaltered.\n   (...)\n   1035 dask.compute\n   1036 \"\"\"\n   1037 new = self.copy(deep=False)\n-&gt; 1038 return new.load(**kwargs)\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/xarray/core/dataset.py:865, in Dataset.load(self, **kwargs)\n    862 chunkmanager = get_chunked_array_type(*lazy_data.values())\n    864 # evaluate all the chunked arrays simultaneously\n--&gt; 865 evaluated_data: tuple[np.ndarray[Any, Any], ...] = chunkmanager.compute(\n    866     *lazy_data.values(), **kwargs\n    867 )\n    869 for k, data in zip(lazy_data, evaluated_data):\n    870     self.variables[k].data = data\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/xarray/namedarray/daskmanager.py:86, in DaskManager.compute(self, *data, **kwargs)\n     81 def compute(\n     82     self, *data: Any, **kwargs: Any\n     83 ) -&gt; tuple[np.ndarray[Any, _DType_co], ...]:\n     84     from dask.array import compute\n---&gt; 86     return compute(*data, **kwargs)\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/dask/base.py:662, in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)\n    659     postcomputes.append(x.__dask_postcompute__())\n    661 with shorten_traceback():\n--&gt; 662     results = schedule(dsk, keys, **kwargs)\n    664 return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_builder.py:434, in _dask_loader_tyx()\n    432 with rdr.restore_env(env, load_state):\n    433     for ti, ti_srcs in enumerate(srcs):\n--&gt; 434         _fill_nd_slice(\n    435             ti_srcs, gbox, cfg, chunk[ti], ydim=ydim, selection=selection\n    436         )\n    437     return chunk\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_builder.py:511, in _fill_nd_slice()\n    508     return dst\n    510 src, *rest = srcs\n--&gt; 511 yx_roi, pix = src.read(cfg, dst_gbox, dst=dst, selection=selection)\n    512 assert len(yx_roi) == 2\n    513 assert pix.ndim == dst.ndim\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py:115, in read()\n    107 def read(\n    108     self,\n    109     cfg: RasterLoadParams,\n   (...)\n    113     selection: Optional[ReaderSubsetSelection] = None,\n    114 ) -&gt; tuple[tuple[slice, slice], np.ndarray]:\n--&gt; 115     return rio_read(self._src, cfg, dst_geobox, dst=dst, selection=selection)\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py:512, in rio_read()\n    508     return roi, out.transpose([1, 2, 0])\n    510 try:\n    511     return fixup_out(\n--&gt; 512         _rio_read(src, cfg, dst_geobox, prep_dst(dst), selection=selection)\n    513     )\n    514 except (\n    515     rasterio.errors.RasterioIOError,\n    516     rasterio.errors.RasterBlockError,\n    517     rasterio.errors.WarpOperationError,\n    518     rasterio.errors.WindowEvaluationError,\n    519 ) as e:\n    520     if cfg.fail_on_error:\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py:565, in _rio_read()\n    562 ovr_idx: Optional[int] = None\n    564 bidx = resolve_band_query(src, rdr.count, selection=selection)\n--&gt; 565 rr = _reproject_info_from_rio(rdr, dst_geobox, ttol=ttol)\n    567 if cfg.use_overviews and rr.read_shrink &gt; 1:\n    568     first_band = bidx if isinstance(bidx, int) else bidx[0]\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/loader/_rio.py:386, in _reproject_info_from_rio()\n    383 def _reproject_info_from_rio(\n    384     rdr: rasterio.DatasetReader, dst_geobox: GeoBox, ttol: float\n    385 ) -&gt; ReprojectInfo:\n--&gt; 386     return compute_reproject_roi(rio_geobox(rdr), dst_geobox, ttol=ttol)\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/geo/overlap.py:489, in compute_reproject_roi()\n    485 # pylint: disable=too-many-locals\n    487 pts_per_side = 5\n--&gt; 489 tr = native_pix_transform(src, dst)\n    491 if tr.linear is None:\n    492     padding = 1 if padding is None else padding\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/geo/overlap.py:337, in native_pix_transform()\n    334 if isinstance(src, GeoBox) and isinstance(dst, GeoBox) and src.crs == dst.crs:\n    335     return _same_crs_pix_transform(src, dst)\n--&gt; 337 return GbxPointTransform(src, dst)\n\nFile ~/miniforge3/envs/odc/lib/python3.12/site-packages/odc/geo/overlap.py:102, in __init__()\n     96 def __init__(\n     97     self,\n     98     src: GeoBoxBase,\n     99     dst: GeoBoxBase,\n    100     back: Optional[\"GbxPointTransform\"] = None,\n    101 ):\n--&gt; 102     assert src.crs is not None and dst.crs is not None\n    103     self._src = src\n    104     self._dst = dst\n\nAssertionError: \n\n\n\n/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/rasterio/__init__.py:304: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.\n  dataset = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n/home/al/miniforge3/envs/odc/lib/python3.12/site-packages/rasterio/__init__.py:304: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.\n  dataset = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)"
  }
]